/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package co.cask.tephra.distributed.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-02-13")
public class TTransaction implements org.apache.thrift.TBase<TTransaction, TTransaction._Fields>, java.io.Serializable, Cloneable, Comparable<TTransaction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTransaction");

  private static final org.apache.thrift.protocol.TField WRITE_POINTER_FIELD_DESC = new org.apache.thrift.protocol.TField("writePointer", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField READ_POINTER_FIELD_DESC = new org.apache.thrift.protocol.TField("readPointer", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TOUCHED_NO_INVALIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("touchedNoInvalids", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField INVALIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("invalids", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField IN_PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("inProgress", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField FIRST_SHORT_FIELD_DESC = new org.apache.thrift.protocol.TField("firstShort", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTransactionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTransactionTupleSchemeFactory();

  public long writePointer; // required
  public long readPointer; // required
  public java.util.List<java.lang.Long> touchedNoInvalids; // required
  public java.util.List<java.lang.Long> invalids; // required
  public java.util.List<java.lang.Long> inProgress; // required
  public long firstShort; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WRITE_POINTER((short)1, "writePointer"),
    READ_POINTER((short)2, "readPointer"),
    TOUCHED_NO_INVALIDS((short)3, "touchedNoInvalids"),
    INVALIDS((short)4, "invalids"),
    IN_PROGRESS((short)5, "inProgress"),
    FIRST_SHORT((short)6, "firstShort");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WRITE_POINTER
          return WRITE_POINTER;
        case 2: // READ_POINTER
          return READ_POINTER;
        case 3: // TOUCHED_NO_INVALIDS
          return TOUCHED_NO_INVALIDS;
        case 4: // INVALIDS
          return INVALIDS;
        case 5: // IN_PROGRESS
          return IN_PROGRESS;
        case 6: // FIRST_SHORT
          return FIRST_SHORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WRITEPOINTER_ISSET_ID = 0;
  private static final int __READPOINTER_ISSET_ID = 1;
  private static final int __FIRSTSHORT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WRITE_POINTER, new org.apache.thrift.meta_data.FieldMetaData("writePointer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.READ_POINTER, new org.apache.thrift.meta_data.FieldMetaData("readPointer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOUCHED_NO_INVALIDS, new org.apache.thrift.meta_data.FieldMetaData("touchedNoInvalids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.INVALIDS, new org.apache.thrift.meta_data.FieldMetaData("invalids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.IN_PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("inProgress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.FIRST_SHORT, new org.apache.thrift.meta_data.FieldMetaData("firstShort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTransaction.class, metaDataMap);
  }

  public TTransaction() {
  }

  public TTransaction(
    long writePointer,
    long readPointer,
    java.util.List<java.lang.Long> touchedNoInvalids,
    java.util.List<java.lang.Long> invalids,
    java.util.List<java.lang.Long> inProgress,
    long firstShort)
  {
    this();
    this.writePointer = writePointer;
    setWritePointerIsSet(true);
    this.readPointer = readPointer;
    setReadPointerIsSet(true);
    this.touchedNoInvalids = touchedNoInvalids;
    this.invalids = invalids;
    this.inProgress = inProgress;
    this.firstShort = firstShort;
    setFirstShortIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTransaction(TTransaction other) {
    __isset_bitfield = other.__isset_bitfield;
    this.writePointer = other.writePointer;
    this.readPointer = other.readPointer;
    if (other.isSetTouchedNoInvalids()) {
      java.util.List<java.lang.Long> __this__touchedNoInvalids = new java.util.ArrayList<java.lang.Long>(other.touchedNoInvalids);
      this.touchedNoInvalids = __this__touchedNoInvalids;
    }
    if (other.isSetInvalids()) {
      java.util.List<java.lang.Long> __this__invalids = new java.util.ArrayList<java.lang.Long>(other.invalids);
      this.invalids = __this__invalids;
    }
    if (other.isSetInProgress()) {
      java.util.List<java.lang.Long> __this__inProgress = new java.util.ArrayList<java.lang.Long>(other.inProgress);
      this.inProgress = __this__inProgress;
    }
    this.firstShort = other.firstShort;
  }

  public TTransaction deepCopy() {
    return new TTransaction(this);
  }

  @Override
  public void clear() {
    setWritePointerIsSet(false);
    this.writePointer = 0;
    setReadPointerIsSet(false);
    this.readPointer = 0;
    this.touchedNoInvalids = null;
    this.invalids = null;
    this.inProgress = null;
    setFirstShortIsSet(false);
    this.firstShort = 0;
  }

  public long getWritePointer() {
    return this.writePointer;
  }

  public TTransaction setWritePointer(long writePointer) {
    this.writePointer = writePointer;
    setWritePointerIsSet(true);
    return this;
  }

  public void unsetWritePointer() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WRITEPOINTER_ISSET_ID);
  }

  /** Returns true if field writePointer is set (has been assigned a value) and false otherwise */
  public boolean isSetWritePointer() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WRITEPOINTER_ISSET_ID);
  }

  public void setWritePointerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WRITEPOINTER_ISSET_ID, value);
  }

  public long getReadPointer() {
    return this.readPointer;
  }

  public TTransaction setReadPointer(long readPointer) {
    this.readPointer = readPointer;
    setReadPointerIsSet(true);
    return this;
  }

  public void unsetReadPointer() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __READPOINTER_ISSET_ID);
  }

  /** Returns true if field readPointer is set (has been assigned a value) and false otherwise */
  public boolean isSetReadPointer() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __READPOINTER_ISSET_ID);
  }

  public void setReadPointerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __READPOINTER_ISSET_ID, value);
  }

  public int getTouchedNoInvalidsSize() {
    return (this.touchedNoInvalids == null) ? 0 : this.touchedNoInvalids.size();
  }

  public java.util.Iterator<java.lang.Long> getTouchedNoInvalidsIterator() {
    return (this.touchedNoInvalids == null) ? null : this.touchedNoInvalids.iterator();
  }

  public void addToTouchedNoInvalids(long elem) {
    if (this.touchedNoInvalids == null) {
      this.touchedNoInvalids = new java.util.ArrayList<java.lang.Long>();
    }
    this.touchedNoInvalids.add(elem);
  }

  public java.util.List<java.lang.Long> getTouchedNoInvalids() {
    return this.touchedNoInvalids;
  }

  public TTransaction setTouchedNoInvalids(java.util.List<java.lang.Long> touchedNoInvalids) {
    this.touchedNoInvalids = touchedNoInvalids;
    return this;
  }

  public void unsetTouchedNoInvalids() {
    this.touchedNoInvalids = null;
  }

  /** Returns true if field touchedNoInvalids is set (has been assigned a value) and false otherwise */
  public boolean isSetTouchedNoInvalids() {
    return this.touchedNoInvalids != null;
  }

  public void setTouchedNoInvalidsIsSet(boolean value) {
    if (!value) {
      this.touchedNoInvalids = null;
    }
  }

  public int getInvalidsSize() {
    return (this.invalids == null) ? 0 : this.invalids.size();
  }

  public java.util.Iterator<java.lang.Long> getInvalidsIterator() {
    return (this.invalids == null) ? null : this.invalids.iterator();
  }

  public void addToInvalids(long elem) {
    if (this.invalids == null) {
      this.invalids = new java.util.ArrayList<java.lang.Long>();
    }
    this.invalids.add(elem);
  }

  public java.util.List<java.lang.Long> getInvalids() {
    return this.invalids;
  }

  public TTransaction setInvalids(java.util.List<java.lang.Long> invalids) {
    this.invalids = invalids;
    return this;
  }

  public void unsetInvalids() {
    this.invalids = null;
  }

  /** Returns true if field invalids is set (has been assigned a value) and false otherwise */
  public boolean isSetInvalids() {
    return this.invalids != null;
  }

  public void setInvalidsIsSet(boolean value) {
    if (!value) {
      this.invalids = null;
    }
  }

  public int getInProgressSize() {
    return (this.inProgress == null) ? 0 : this.inProgress.size();
  }

  public java.util.Iterator<java.lang.Long> getInProgressIterator() {
    return (this.inProgress == null) ? null : this.inProgress.iterator();
  }

  public void addToInProgress(long elem) {
    if (this.inProgress == null) {
      this.inProgress = new java.util.ArrayList<java.lang.Long>();
    }
    this.inProgress.add(elem);
  }

  public java.util.List<java.lang.Long> getInProgress() {
    return this.inProgress;
  }

  public TTransaction setInProgress(java.util.List<java.lang.Long> inProgress) {
    this.inProgress = inProgress;
    return this;
  }

  public void unsetInProgress() {
    this.inProgress = null;
  }

  /** Returns true if field inProgress is set (has been assigned a value) and false otherwise */
  public boolean isSetInProgress() {
    return this.inProgress != null;
  }

  public void setInProgressIsSet(boolean value) {
    if (!value) {
      this.inProgress = null;
    }
  }

  public long getFirstShort() {
    return this.firstShort;
  }

  public TTransaction setFirstShort(long firstShort) {
    this.firstShort = firstShort;
    setFirstShortIsSet(true);
    return this;
  }

  public void unsetFirstShort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FIRSTSHORT_ISSET_ID);
  }

  /** Returns true if field firstShort is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstShort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FIRSTSHORT_ISSET_ID);
  }

  public void setFirstShortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FIRSTSHORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case WRITE_POINTER:
      if (value == null) {
        unsetWritePointer();
      } else {
        setWritePointer((java.lang.Long)value);
      }
      break;

    case READ_POINTER:
      if (value == null) {
        unsetReadPointer();
      } else {
        setReadPointer((java.lang.Long)value);
      }
      break;

    case TOUCHED_NO_INVALIDS:
      if (value == null) {
        unsetTouchedNoInvalids();
      } else {
        setTouchedNoInvalids((java.util.List<java.lang.Long>)value);
      }
      break;

    case INVALIDS:
      if (value == null) {
        unsetInvalids();
      } else {
        setInvalids((java.util.List<java.lang.Long>)value);
      }
      break;

    case IN_PROGRESS:
      if (value == null) {
        unsetInProgress();
      } else {
        setInProgress((java.util.List<java.lang.Long>)value);
      }
      break;

    case FIRST_SHORT:
      if (value == null) {
        unsetFirstShort();
      } else {
        setFirstShort((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case WRITE_POINTER:
      return getWritePointer();

    case READ_POINTER:
      return getReadPointer();

    case TOUCHED_NO_INVALIDS:
      return getTouchedNoInvalids();

    case INVALIDS:
      return getInvalids();

    case IN_PROGRESS:
      return getInProgress();

    case FIRST_SHORT:
      return getFirstShort();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case WRITE_POINTER:
      return isSetWritePointer();
    case READ_POINTER:
      return isSetReadPointer();
    case TOUCHED_NO_INVALIDS:
      return isSetTouchedNoInvalids();
    case INVALIDS:
      return isSetInvalids();
    case IN_PROGRESS:
      return isSetInProgress();
    case FIRST_SHORT:
      return isSetFirstShort();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TTransaction)
      return this.equals((TTransaction)that);
    return false;
  }

  public boolean equals(TTransaction that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_writePointer = true;
    boolean that_present_writePointer = true;
    if (this_present_writePointer || that_present_writePointer) {
      if (!(this_present_writePointer && that_present_writePointer))
        return false;
      if (this.writePointer != that.writePointer)
        return false;
    }

    boolean this_present_readPointer = true;
    boolean that_present_readPointer = true;
    if (this_present_readPointer || that_present_readPointer) {
      if (!(this_present_readPointer && that_present_readPointer))
        return false;
      if (this.readPointer != that.readPointer)
        return false;
    }

    boolean this_present_touchedNoInvalids = true && this.isSetTouchedNoInvalids();
    boolean that_present_touchedNoInvalids = true && that.isSetTouchedNoInvalids();
    if (this_present_touchedNoInvalids || that_present_touchedNoInvalids) {
      if (!(this_present_touchedNoInvalids && that_present_touchedNoInvalids))
        return false;
      if (!this.touchedNoInvalids.equals(that.touchedNoInvalids))
        return false;
    }

    boolean this_present_invalids = true && this.isSetInvalids();
    boolean that_present_invalids = true && that.isSetInvalids();
    if (this_present_invalids || that_present_invalids) {
      if (!(this_present_invalids && that_present_invalids))
        return false;
      if (!this.invalids.equals(that.invalids))
        return false;
    }

    boolean this_present_inProgress = true && this.isSetInProgress();
    boolean that_present_inProgress = true && that.isSetInProgress();
    if (this_present_inProgress || that_present_inProgress) {
      if (!(this_present_inProgress && that_present_inProgress))
        return false;
      if (!this.inProgress.equals(that.inProgress))
        return false;
    }

    boolean this_present_firstShort = true;
    boolean that_present_firstShort = true;
    if (this_present_firstShort || that_present_firstShort) {
      if (!(this_present_firstShort && that_present_firstShort))
        return false;
      if (this.firstShort != that.firstShort)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(writePointer);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(readPointer);

    hashCode = hashCode * 8191 + ((isSetTouchedNoInvalids()) ? 131071 : 524287);
    if (isSetTouchedNoInvalids())
      hashCode = hashCode * 8191 + touchedNoInvalids.hashCode();

    hashCode = hashCode * 8191 + ((isSetInvalids()) ? 131071 : 524287);
    if (isSetInvalids())
      hashCode = hashCode * 8191 + invalids.hashCode();

    hashCode = hashCode * 8191 + ((isSetInProgress()) ? 131071 : 524287);
    if (isSetInProgress())
      hashCode = hashCode * 8191 + inProgress.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(firstShort);

    return hashCode;
  }

  @Override
  public int compareTo(TTransaction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetWritePointer()).compareTo(other.isSetWritePointer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWritePointer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writePointer, other.writePointer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReadPointer()).compareTo(other.isSetReadPointer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadPointer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readPointer, other.readPointer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTouchedNoInvalids()).compareTo(other.isSetTouchedNoInvalids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTouchedNoInvalids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.touchedNoInvalids, other.touchedNoInvalids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInvalids()).compareTo(other.isSetInvalids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvalids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalids, other.invalids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInProgress()).compareTo(other.isSetInProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inProgress, other.inProgress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFirstShort()).compareTo(other.isSetFirstShort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstShort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstShort, other.firstShort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTransaction(");
    boolean first = true;

    sb.append("writePointer:");
    sb.append(this.writePointer);
    first = false;
    if (!first) sb.append(", ");
    sb.append("readPointer:");
    sb.append(this.readPointer);
    first = false;
    if (!first) sb.append(", ");
    sb.append("touchedNoInvalids:");
    if (this.touchedNoInvalids == null) {
      sb.append("null");
    } else {
      sb.append(this.touchedNoInvalids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("invalids:");
    if (this.invalids == null) {
      sb.append("null");
    } else {
      sb.append(this.invalids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("inProgress:");
    if (this.inProgress == null) {
      sb.append("null");
    } else {
      sb.append(this.inProgress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstShort:");
    sb.append(this.firstShort);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTransactionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TTransactionStandardScheme getScheme() {
      return new TTransactionStandardScheme();
    }
  }

  private static class TTransactionStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTransaction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTransaction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WRITE_POINTER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.writePointer = iprot.readI64();
              struct.setWritePointerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // READ_POINTER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.readPointer = iprot.readI64();
              struct.setReadPointerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOUCHED_NO_INVALIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.touchedNoInvalids = new java.util.ArrayList<java.lang.Long>(_list0.size);
                long _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI64();
                  struct.touchedNoInvalids.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTouchedNoInvalidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INVALIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.invalids = new java.util.ArrayList<java.lang.Long>(_list3.size);
                long _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI64();
                  struct.invalids.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setInvalidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IN_PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.inProgress = new java.util.ArrayList<java.lang.Long>(_list6.size);
                long _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readI64();
                  struct.inProgress.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setInProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FIRST_SHORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.firstShort = iprot.readI64();
              struct.setFirstShortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTransaction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(WRITE_POINTER_FIELD_DESC);
      oprot.writeI64(struct.writePointer);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(READ_POINTER_FIELD_DESC);
      oprot.writeI64(struct.readPointer);
      oprot.writeFieldEnd();
      if (struct.touchedNoInvalids != null) {
        oprot.writeFieldBegin(TOUCHED_NO_INVALIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.touchedNoInvalids.size()));
          for (long _iter9 : struct.touchedNoInvalids)
          {
            oprot.writeI64(_iter9);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.invalids != null) {
        oprot.writeFieldBegin(INVALIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.invalids.size()));
          for (long _iter10 : struct.invalids)
          {
            oprot.writeI64(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.inProgress != null) {
        oprot.writeFieldBegin(IN_PROGRESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.inProgress.size()));
          for (long _iter11 : struct.inProgress)
          {
            oprot.writeI64(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FIRST_SHORT_FIELD_DESC);
      oprot.writeI64(struct.firstShort);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTransactionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TTransactionTupleScheme getScheme() {
      return new TTransactionTupleScheme();
    }
  }

  private static class TTransactionTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTransaction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTransaction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetWritePointer()) {
        optionals.set(0);
      }
      if (struct.isSetReadPointer()) {
        optionals.set(1);
      }
      if (struct.isSetTouchedNoInvalids()) {
        optionals.set(2);
      }
      if (struct.isSetInvalids()) {
        optionals.set(3);
      }
      if (struct.isSetInProgress()) {
        optionals.set(4);
      }
      if (struct.isSetFirstShort()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetWritePointer()) {
        oprot.writeI64(struct.writePointer);
      }
      if (struct.isSetReadPointer()) {
        oprot.writeI64(struct.readPointer);
      }
      if (struct.isSetTouchedNoInvalids()) {
        {
          oprot.writeI32(struct.touchedNoInvalids.size());
          for (long _iter12 : struct.touchedNoInvalids)
          {
            oprot.writeI64(_iter12);
          }
        }
      }
      if (struct.isSetInvalids()) {
        {
          oprot.writeI32(struct.invalids.size());
          for (long _iter13 : struct.invalids)
          {
            oprot.writeI64(_iter13);
          }
        }
      }
      if (struct.isSetInProgress()) {
        {
          oprot.writeI32(struct.inProgress.size());
          for (long _iter14 : struct.inProgress)
          {
            oprot.writeI64(_iter14);
          }
        }
      }
      if (struct.isSetFirstShort()) {
        oprot.writeI64(struct.firstShort);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTransaction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.writePointer = iprot.readI64();
        struct.setWritePointerIsSet(true);
      }
      if (incoming.get(1)) {
        struct.readPointer = iprot.readI64();
        struct.setReadPointerIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.touchedNoInvalids = new java.util.ArrayList<java.lang.Long>(_list15.size);
          long _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = iprot.readI64();
            struct.touchedNoInvalids.add(_elem16);
          }
        }
        struct.setTouchedNoInvalidsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.invalids = new java.util.ArrayList<java.lang.Long>(_list18.size);
          long _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = iprot.readI64();
            struct.invalids.add(_elem19);
          }
        }
        struct.setInvalidsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.inProgress = new java.util.ArrayList<java.lang.Long>(_list21.size);
          long _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readI64();
            struct.inProgress.add(_elem22);
          }
        }
        struct.setInProgressIsSet(true);
      }
      if (incoming.get(5)) {
        struct.firstShort = iprot.readI64();
        struct.setFirstShortIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

